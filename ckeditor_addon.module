<?php

/**
 * Implements hook_library_alter().
 *
 * Make use of custom build.
 */
function ckeditor_addon_library_info_alter(&$libraries, $module) {
  if ($module == 'ckeditor') {
    unset ($libraries['ckeditor']);
    $libraries['ckeditor'] = array(
      'title' => 'Loads the main CKEditor library.',
      'version' => '4.5.5',
      'js' => array(
        backdrop_get_path('module', 'ckeditor_addon') . '/js/ckeditor/ckeditor.js' => array('preprocess' => FALSE, 'group' => JS_LIBRARY),
      ),
    );
  }
}

/**
 * Implements hook_ckeditor_plugins_alter().
 */
function ckeditor_addon_ckeditor_plugins_alter(&$plugins) {
  // Replaced.
  $path = backdrop_get_path('module', 'ckeditor_addon');
  $image_prefix = backdrop_get_path('module', 'ckeditor') . '/images/buttons/';

  // The backdropimage plugin replaces normal image functionality.
  $plugins['backdropimage'] = array(
    'path' => $path . '/js/plugins/backdropimage',
    'file' => 'plugin.js',
    'buttons' => array(
      'BackdropImage' => array(
        'label' => t('Image'),
        'required_html' => array(
          array(
            'tags' => array('img'),
            'attributes' => array('src', 'alt', 'data-file-id', 'data-align'),
          ),
        ),
        'image' => $image_prefix . 'image.png',
      ),
    ),
  );

  // The backdropcaption plugin provides consistent behaviors for image captions.
  $plugins['backdropimagecaption'] = array(
    'path' => $path . '/js/plugins/backdropimagecaption',
    'file' => 'plugin.js',
    'css' => array(backdrop_get_path('module', 'ckeditor') . '/css/ckeditor-caption.css'),
    'enabled callback' => 'ckeditor_image_plugin_check',
    'required_html' => array(
      array(
        'tags' => array('img'),
        'attributes' => array('data-caption'),
      ),
      array(
        'tags' => array('figure', 'figcaption'),
        'attributes' => array('src', 'alt', 'class', 'data-placeholder'),
      ),
    )
  );

  // The backdroplink plugin replaces normal link funcitonality.
  $plugins['backdroplink'] = array(
    'path' => $path . '/js/plugins/backdroplink',
    'file' => 'plugin.js',
    'buttons' => array(
      'BackdropLink' => array(
        'label' => t('Link'),
        'required_html' => array(array(
          'tags' => array('a'),
          'attributes' => array('href'),
        )),
        'image' => $image_prefix . 'link.png',
      ),
      'BackdropUnlink' => array(
        'label' => t('Link'),
        'required_html' => array(array(
          'tags' => array('a'),
          'attributes' => array('href'),
        )),
        'image' => $image_prefix . '/unlink.png',
      ),
    ),
  );

  // Added.

  // The backdropuploadimage plugin provides backdrop compliant uploadimage functionality.
  $plugins['backdropuploadimage'] = array(
    'path' =>  $path . '/js/plugins/backdropuploadimage',
    'buttons' => array(),
    'enabled callback' => TRUE,
    'file' => 'plugin.js',
  );

  // Specify toolbar buttons.

  $image_prefix = backdrop_get_path('module', 'ckeditor_addon') . '/images/buttons/';
  $plugins['default']['buttons'] += array(
    'CodeSnippet' => array(
      'label' => t('Code Snippet'),
      'image' => $image_prefix . 'codesnippet.png',
    ),
    'Save' => array(
      'label' => t('Save document'),
      'image' => $image_prefix . 'save.png',
    ),
  );
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ckeditor_addon_ckeditor_plugins() {
  $path = backdrop_get_path('module', 'ckeditor_addon') . '/js/plugins/';
  $plugins['autogrowcustom'] = array(
    'name' => 'autogrowcustom',
    'desc' => t('autogrowcustom Plugin'),
    'path' =>  $path . 'autogrowcustom',
    'buttons' => array(),
    'file' => 'plugin.js',
    'enabled callback' => TRUE,
  );
  if (module_exists('imce')) {
    $plugins['imce'] = array(
      'name' => 'imce',
      'desc' => t('Plugin for inserting files from IMCE without image dialog'),
      'path' =>  $path . 'imce',
      'buttons' => array(
        'IMCE' => array(
          'label' => 'IMCE',
          'image' => $path . 'imce/images/icon.png',
        ),
      ),
      'file' => 'plugin.js',
      'enabled callback' => TRUE,
    );
  }
  return $plugins;
}

/**
 * Implements hook_menu().
 */
function ckeditor_addon_menu() {
  $items['filter/uploadimage/%/%'] = array(
    'page callback' => 'filter_upload_image',
    'page arguments' => array(2, 3),
  //'access arguments' => array('use direct upload'), // ?
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ckeditor_addon.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ckeditor_addon_form_filter_format_editor_image_form_alter(&$form, $form_state) {
  $format = $form_state['format'];
  if ($format->editor !== 'ckeditor') {
    return;
  }
  $values = array();
  if (isset($form_state['input']['editor_object'])) {
    $values = $form_state['input']['editor_object'];
  }
  $options = array("none" => t('Original'));
  foreach (image_styles() as $name => $style) {
    $options[$name] = $style['label'];
  }
  $form['style'] = array(
    '#title' => t('Style'),
    '#type' => 'select',
    '#default_value' => isset($values['data-style']) ? $values['data-style'] : 'none',
    '#options' => $options,
    '#wrapper_attributes' => array('class' => array('editor-image-style')),
    '#parents' => array('attributes', 'data-style'),
  );
  // weight controls to provide right place for style
  $form['alt']['#weight'] = 10;
  $form['style']['#weight'] = 20;
  $form['size']['#weight'] = 30;
  $form['align']['#weight'] = 40;
  $form['caption']['#weight'] = 50;
  
  // Override filter_format_editor_dialog_save().
  $form['actions']['submit']['#ajax']['callback'] = 'ckeditor_addon_format_editor_dialog_save';
}

/**
 * Override filter_format_editor_dialog_save().
 */
function ckeditor_addon_format_editor_dialog_save($form, &$form_state) {
  $return = filter_format_editor_dialog_save($form, $form_state);
  if (isset($return['#commands'][0]['values']['attributes']['data-file-id'])) {
    $fid = $return['#commands'][0]['values']['attributes']['data-file-id'];
    if (!empty($fid)) {
      $style_name = $return['#commands'][0]['values']['attributes']['data-style'];

      $file = file_load($fid);
      $path = ($style_name == 'none') ? file_create_url($file->uri) : image_style_url($style_name, $file->uri);

      if ($return['#commands'][0]['values']['attributes']['src'] != $path) {
        $form_state['values']['attributes']['src'] = $path;
        $return['#commands'][0]['values']['attributes']['src'] = $path;
        // clear image width & height if style has changed, but not size.
        // questionable...
        if ($form['style']['#default_value'] != 'none'
          && $form_state['values']['attributes']['data-style'] != $form['style']['#default_value']
          && $form_state['values']['attributes']['width'] == $form['size']['width']['#default_value']
          && $form_state['values']['attributes']['height'] == $form['size']['height']['#default_value']) {
            $form_state['values']['attributes']['width'] = '';
            $return['#commands'][0]['values']['attributes']['width'] = '';
            $form_state['values']['attributes']['height'] = '';
            $return['#commands'][0]['values']['attributes']['height'] = '';
        }
      }
    }
  }
  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a title and a target fields on EditorLinkDialog if the filter allows it.
 * Note: the editor_file module declares that its EditorFileDialog form uses
 *   'editor_link_dialog' as base_form_id. In this case, the function above is
 *   going to be called as an implementation of hook_form_BASE_FORM_ID_alter().
 */

function ckeditor_addon_form_filter_format_editor_link_form_alter(&$form, $form_state) {
  $format = $form_state['format'];
  if ($format->editor !== 'ckeditor') {
    return;
  }
  $values = array();
  if (isset($form_state['input']['editor_object'])) {
    $values = $form_state['input']['editor_object'];
  }

  $form['attributes']['href']['#weight'] = 0;

  $form['target'] = array(
    '#title' => t('Open in new window'),
    '#type' => 'checkbox',
    '#return_value' => '_blank',
    '#default_value' => isset($values['target']) ? $values['target'] : FALSE,
    '#element_validate' => array('_editor_advanced_link_target_validate'),
    '#parents' => array('attributes', 'target'),
  );

  $form['attributes'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Attributes'),
    '#collapsible'  => TRUE,
  );

  if (empty($values['class']) && empty($values['id']) && empty($values['rel']) && empty($values['title'])) {
    $form['attributes']['#collapsed'] = TRUE;
  }

  $form['attributes']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Populates the title attribute of the link, usually shown as a small tooltip on hover.'),
    '#default_value' => isset($values['title']) ? $values['title'] : '',
    '#maxlength' => 512,
    '#weight' => 1,
    '#parents' => array('attributes', 'title'),
  );

  $form['attributes']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS classes'),
    '#description' => t('List of CSS classes to add to the link, separated by spaces.'),
    '#default_value' => isset($values['class']) ? $values['class'] : '',
    '#maxlength' => 512,
    '#parents' => array('attributes', 'class'),
  );

  $form['attributes']['id'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#description' => t('Allows linking to this content using a <a href="https://en.wikipedia.org/wiki/Fragment_identifier">URL fragment</a>). Must be unique.'),
    '#default_value' => isset($values['id']) ? $values['id'] : '',
    '#maxlength' => 512,
    '#parents' => array('attributes', 'id'),
  );

  $form['attributes']['rel'] = array(
    '#type' => 'textfield',
    '#title' => t('Relation (rel)'),
    '#description' => t('Often used by JS galleries.'),
    '#default_value' => isset($values['rel']) ? $values['rel'] : '',
    '#maxlength' => 512,
    '#parents' => array('attributes', 'rel'),
  );

}

/**
 * "target" element validator.
 *
 * Clears the value if empty to avoid target="0" to be added to the link.
 */
function _editor_advanced_link_target_validate($element, $form_state, $form) {
  $attributes = $form_state['values']['attributes'];
  $attributes = array_filter($attributes);
  $form_state['values']['attributes'] = $attributes;
  //TODO: Also fix plugin's downcast.
}

/**
 * Implements hook_field_attach_view_alter.
 * add js & css for codesnippet out of CKEditor pages
 */
function ckeditor_addon_field_attach_view_alter(&$output, $context) {
  static $done = FALSE;
  if ($done)
    return;
  list($id, $revision_id, $bundle) = entity_extract_ids($context['entity_type'], $context['entity']);
  $fields = field_info_instances($context['entity_type'], $bundle);
  foreach ($fields as $name => $field) {
    if ($field['widget']['module'] == 'text' && isset($output[$name])) {
      foreach (element_children($output[$name]) as $key) {
        if (strpos($output[$name][$key]['#markup'], '<code class="language') !== FALSE) {
          $path = backdrop_get_path('module', 'ckeditor_addon') . '/js/ckeditor/plugins/codesnippet/lib/highlight/';
          backdrop_add_js($path . 'highlight.pack.js', array('type' => 'file', 'scope' => 'footer'));
          $inline_js = "hljs.initHighlightingOnLoad();";
          backdrop_add_js($inline_js, array('type' => 'inline', 'scope' => 'footer'));
          backdrop_add_css($path . 'styles/github.css', array(
            'group' => CSS_THEME, 
            'weight' => 142, 
            'every_page' => FALSE,
          ));
          $done = TRUE;
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_ckeditor_settings_alter().
 *
 * Once was "Advanced options."
 */
function ckeditor_addon_ckeditor_settings_alter(&$config, $format) {
  static $done = false;
  // this is called for each format
  if (!$done) {
    // Pass Backdrop's JS cache-busting string via inline script along to CKEditor.
    // (using behaviors would be too late)
    $query_string = !defined('MAINTENANCE_MODE') ? state_get('css_js_query_string', '0') : '';
    $inline_js = '(function($) {
  $(document).ready(function () {
    if (typeof CKEDITOR !== "undefined") {';
    $inline_js .= '
      CKEDITOR.timestamp = "'.$query_string.'";';
    $inline_js .= '
    }
  });
}(jQuery));
';
    backdrop_add_js($inline_js, array('type' => 'inline'));
    $done = true;
  }

  $config['extraPlugins'] .= ',codemirror';
  $config['codeSnippet_theme'] = 'Github';
  $config['format_tags'] = 'p;h2;h3;h4;h5;h6;pre;address;div';
	$config['specialChars'] = array(
		'&amp;', '&gt;', '&lt;', '&quot;', '&acute;', '&cedil;', '&circ;', '&macr;', '&middot;', '&tilde;', '&uml;', '&Aacute;', '&aacute;', '&Acirc;', '&acirc;',
		'&AElig;', '&aelig;', '&Agrave;', '&agrave;', '&Aring;', '&aring;', '&Atilde;', '&atilde;', '&Auml;', '&auml;', '&Ccedil;', '&ccedil;', '&Eacute;',
		'&eacute;', '&Ecirc;', '&ecirc;', '&Egrave;', '&egrave;', '&ETH;', '&eth;', '&Euml;', '&euml;', '&Iacute;', '&iacute;', '&Icirc;', '&icirc;', '&Igrave;',
		'&igrave;', '&Iuml;', '&iuml;', '&Ntilde;', '&ntilde;', '&Oacute;', '&oacute;', '&Ocirc;', '&ocirc;', '&OElig;', '&oelig;', '&Ograve;', '&ograve;',
		'&Oslash;', '&oslash;', '&Otilde;', '&otilde;', '&Ouml;', '&ouml;', '&Scaron;', '&scaron;', '&szlig;', '&THORN;', '&thorn;', '&Uacute;', '&uacute;',
		'&Ucirc;', '&ucirc;', '&Ugrave;', '&ugrave;', '&Uuml;', '&uuml;', '&Yacute;', '&yacute;', '&yuml;', '&Yuml;', '&cent;', '&curren;', '&euro;', '&pound;',
		'&yen;', '&brvbar;', '&bull;', '&copy;', '&dagger;', '&Dagger;', '&frasl;', '&hellip;', '&iexcl;', '&image;', '&iquest;', '&lrm;', '&mdash;', '&ndash;',
		'&not;', '&oline;', '&ordf;', '&ordm;', '&para;', '&permil;', '&prime;', '&Prime;', '&real;', '&reg;', '&rlm;', '&sect;', '&shy;', '&sup1;', '&trade;',
		'&weierp;', '&bdquo;', '&laquo;', '&ldquo;', '&lsaquo;', '&lsquo;', '&raquo;', '&rdquo;', '&rsaquo;', '&rsquo;', '&sbquo;', '&emsp;', '&ensp;', '&nbsp;',
		'&thinsp;', '&#x202F;', '&zwj;', '&zwnj;', '&deg;', '&divide;', '&frac12;', '&frac14;', '&frac34;', '&ge;', '&le;', '&minus;', '&sup2;', '&sup3;',
		'&times;', '&and;', '&ang;', '&asymp;', '&cap;', '&cong;', '&cup;', '&empty;', '&equiv;', '&exist;', '&fnof;', '&forall;', '&infin;', '&int;', '&isin;',
		'&lang;', '&lceil;', '&lfloor;', '&lowast;', '&micro;', '&nabla;', '&ne;', '&ni;', '&notin;', '&nsub;', '&oplus;', '&or;', '&otimes;', '&part;', '&perp;',
		'&plusmn;', '&prod;', '&prop;', '&radic;', '&rang;', '&rceil;', '&rfloor;', '&sdot;', '&sim;', '&sub;', '&sube;', '&sum;', '&sup;', '&supe;', '&there4;',
		'&Alpha;', '&Beta;', '&Chi;', '&Delta;', '&Epsilon;', '&Eta;', '&Gamma;', '&Iota;', '&Kappa;', '&Lambda;', '&Mu;', '&Nu;', '&Omega;', '&Omicron;', '&Phi;',
		'&Pi;', '&Psi;', '&Rho;', '&Sigma;', '&Tau;', '&Theta;', '&Upsilon;', '&Xi;', '&Zeta;', '&alpha;', '&beta;', '&chi;', '&delta;', '&epsilon;', '&eta;',
		'&gamma;', '&iota;', '&kappa;', '&lambda;', '&mu;', '&nu;', '&omega;', '&omicron;', '&phi;', '&pi;', '&piv;', '&psi;', '&rho;', '&sigma;', '&sigmaf;',
		'&tau;', '&theta;', '&thetasym;', '&upsih;', '&upsilon;', '&xi;', '&zeta;', '&crarr;', '&darr;', '&dArr;', '&harr;', '&hArr;', '&larr;', '&lArr;', '&rarr;',
		'&rArr;', '&uarr;', '&uArr;', '&clubs;', '&diams;', '&hearts;', '&spades;', '&loz;'        
	);
}
